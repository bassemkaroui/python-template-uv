[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ project_name }}"
version = "0.0.1"
description = "{{ project_description }}"
authors = [{ name = "{{ author_fullname }}", email = "{{ author_email }}" }]
readme = "README.md"
{%- if copyright_license != 'No License' %}
license = { file = "LICENSE" }
{%- endif %}
keywords = [
{%- set keywords = (project_keywords.split(",") | map("trim") | list) %}
{%- for keyword in keywords | sort %}
    "{{ keyword }}",
{%- endfor %}
]
requires-python = ">={{ min_python_version }},<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    {%- for version in py_versions %}
    {%- set v_tuple = version.split('.') | map('int') | list -%}
    {%- set min_tuple = min_python_version.split('.') | map('int') | list -%}
    {%- if v_tuple >= min_tuple %}
    "Programming Language :: Python :: {{ version }}",
    {%- endif %}
    {%- endfor %}
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
{% include 'includes/dependencies.jinja' %}
]

{% include 'includes/pytorch_indixes.jinja' %}
{% if repository_provider == 'github' -%}
[project.urls]
Homepage = "{{ homepage }}"
Repository = "{{ repository }}"
Documentation = "{{ documentation }}"
{%- endif %}

{% if with_typer_cli -%}
[project.scripts]
{{ cli_name }} = "{{ project_slug }}.cli.main:app"
{%- endif %}

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    {%- if pytest_xdist %}
    "pytest-xdist>=3.6.1",
    {%- endif %}
    "pre-commit>=4.2.0",
    {%- if tox %}
    "tox-uv>=1.25.0",
    {%- endif %}
    "mypy>=1.15.0",
    "ruff>=0.11.5",
    {%- if with_conventional_commits %}
    "commitizen>=4.6.0",
    "cz-conventional-gitmoji>=0.7.0",
    {%- endif %}
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.11",
    "mkdocstrings[python]>=0.29.1",
    "markdown-callouts>=0.4.0",
    "griffe-typingdoc>=0.2.8",
    "griffe>=1.7.2",
    "ipython>=8.35.0",
    "duty>=1.6.0",
    {% include 'includes/extra_dev_dependencies.jinja' %}
]

{% if with_conventional_commits -%}
[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
{%- if cz_gitmoji %}
name = "cz_gitmoji"
{%- else %}
name = "cz_conventional_commits"
{%- endif %}
version_files = ["src/{{ project_slug }}/__init__.py"{% if dockerfile %}, "compose.yaml"{% endif %}]
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
changelog_merge_prerelease = true
{%- if gpg_sign_tags %}
gpg_sign = true
{%- endif %}
{%- endif %}

[tool.mypy]
files = ["src"]
check_untyped_defs = true
disallow_untyped_defs = true
# disallow_any_unimported = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.ruff]
target-version = "py{{ min_python_version | replace('.', '') }}"
line-length = 100
fix = true

[tool.ruff.lint]
preview = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # flake8-future-annotations
    "FA",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
    # NumPy-specific rules
    "NPY",
    # pandas-vet
    "PD",
    # pep8-naming
    "N",
    # flake8-pytest-style
    "PT",
    # flake8-pie
    "PIE",
    # flake8-tidy-imports
    "TID",
    # flake8-implicit-str-concat
    "ISC",
    # Perflint
    "PERF",
    # flynt
    "FLY",
    # unconventional-import-alias
    "ICN001",
    # pylint
    "PL",
]
ignore = [
    # LineTooLong
    "E501",
    # indentation-with-invalid-multiple
    "E111",
    # indentation-with-invalid-multiple-comment
    "E114",
    # over-indented
    "E117",
    # tab-indentation
    "W191",
    # too-many-public-methods
    "PLR0904",
    # Too many returns
    "PLR0911",
    # Too many branches
    "PLR0912",
    # Too many arguments to function call
    "PLR0913",
    # too-many-locals
    "PLR0914",
    # Too many statements
    "PLR0915",
    # too-many-boolean-expressions
    "PLR0916",
    # Too many positional arguments
    "PLR0917",
    # too-many-nested-blocks
    "PLR1702",
    # literal-membership
    "PLR6201",
    # Private name import
    "PLC2701",
    # compare-to-empty-string
    "PLC1901",
    # import-outside-toplevel
    "PLC0415",
    # unnecessary-dunder-call
    "PLC2801",
    # Global statements are discouraged
    "PLW0603",
    # unspecified-encoding
    "PLW1514",
    # raise-vanilla-args
    "TRY003",

]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true
docstring-code-format = true

# [tool.ruff.lint.isort]
# # Useful when using Python < 3.10
# required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["--import-mode=importlib"]

[tool.coverage.report]
fail_under = {{ coverage_threshold }}
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "if __name__ == .__main__.:",
]
omit = ["*/__init__.py", "*/{{ project_slug }}/testing/*"]

[tool.coverage.run]
branch = true
source = ["src"]
